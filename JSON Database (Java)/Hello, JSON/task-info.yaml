type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";
        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/DeleteCommand.java
  visible: true
  text: |
    package server;

    public class DeleteCommand implements Command {

        private DataBase db;
        private Integer key;
        public DeleteCommand(DataBase db, Integer key) {
            this.db = db;
            this.key = key;
        }
        @Override
        public String execute() {
            return this.db.removeValue(this.key);
        }
    }
  learner_created: true
- name: src/server/DataBase.java
  visible: true
  text: |
    package server;

    import java.util.HashMap;
    import java.util.Map;

    public class DataBase {
        private Map<Integer, String> db = new HashMap<>();
        public DataBase() {
            for (int i = 1; i <= 1000; i++) {
                this.db.put(i, null);
            }
        }

        public Map<Integer, String> getDb() {
            return db;
        }

        public String setValue(Integer key, String value) {
            return this.db.put(key, value);
        }
        public String getValue(Integer key) {
            return this.db.get(key);
        }
        public String removeValue(Integer key) {
            return this.db.remove(key);
        }
    }
  learner_created: true
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;
    import java.util.Scanner;

    public class Client {
        private static final String SERVER_ADDRESS = "127.0.0.1";
        private static final int SERVER_PORT = 34522;

        public void runClient(String command) {
            try (
                    Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output  = new DataOutputStream(socket.getOutputStream())
            ) {
                System.out.println("Client started!");

                output.writeUTF(command);
                System.out.println("Sent: " + command);
                String receivedMsg = input.readUTF();
                System.out.println("Received: " + receivedMsg);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/server/DataBaseProcessor.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;

    public class DataBaseProcessor {

        public static String userInterface(String inputLine, DataBase dataBase) {
            String[] input = inputLine.split(" ");
            String command = "";
            String result = null;
            int index = 0;
            StringBuilder value = new StringBuilder();
            if (input.length == 2) {
                command = input[0].toLowerCase();
                index = Integer.parseInt(input[1]);
                result = performCommand(dataBase, command, index, value.toString());
            } else if (input.length >= 3) {//refactor this shit
                command = input[0].toLowerCase();
                index = Integer.parseInt(input[1]);
                for (int i = 2; i < input.length; i++) {
                    value.append(input[i]).append(" ");
                }
                result = performCommand(dataBase, command, index, value.toString());
            } else if (input.length == 1 && "exit".equals(input[0])) {
                result = "OK";
            } else {
                result = "ERROR";
            }
            return result;
        }
        public static String performCommand(DataBase db, String command, int index, String value) {
            String response = null;
            if (index > 1000 || index <= 0) {
                response = "ERROR";
            } else {
                DatabaseInvoker databaseInvoker = new DatabaseInvoker();
                switch (command) {
                    case "set":
                        databaseInvoker.setCommand(new SetCommand(db, index, value));
                        databaseInvoker.executeCommand();
                        response = "OK";
                        break;
                    case "delete":
                        databaseInvoker.setCommand(new DeleteCommand(db, index));
                        databaseInvoker.executeCommand();
                        response = "OK";
                        break;
                    case "get":
                        databaseInvoker.setCommand(new GetCommand(db, index));
                        String res = databaseInvoker.executeCommand();
                        response = res == null ? "ERROR" : res;
                        break;
                }
            }
            return response;
        }

    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;

    import static server.DataBaseProcessor.userInterface;

    public class Server {
        static final int PORT = 34522;

        public void runServer() {
            try (ServerSocket server = new ServerSocket(PORT)) {
                System.out.println("Server started!");
                DataBase db = new DataBase();
                while (true) {
                    try (
                            Socket socket = server.accept();
                            DataInputStream input = new DataInputStream(socket.getInputStream());
                            DataOutputStream output = new DataOutputStream(socket.getOutputStream())
                    ) {
                        String msg = input.readUTF();
                        String result = userInterface(msg, db);
                        output.writeUTF(result);
                        if ("exit".equals(msg)) {
                            break;
                        }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/server/DatabaseInvoker.java
  visible: true
  text: |
    package server;

    public class DatabaseInvoker {
        private Command command;

        public void setCommand(Command command) {
            this.command = command;
        }

        public String executeCommand() {
            return command.execute();
        }
    }
  learner_created: true
- name: src/client/Args.java
  visible: true
  text: |
    package client;

    //import com.beust.jcommander.Parameter;

    public class Args {
        //@Parameter(names = "-t", description = "Command type")
        private String commandType;
        //@Parameter(names = "-i", description = "Record index")
        private Integer index;
        //@Parameter(names = "-m", description = "Record value")
        private String value = "";

        public String getCommandType() {
            return commandType;
        }

        public Integer getIndex() {
            return index;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return commandType + " " + index + " " + value;
        }
    }
  learner_created: true
- name: src/server/Command.java
  visible: true
  text: |
    package server;

    public interface Command {
        String execute();
    }
  learner_created: true
- name: src/server/GetCommand.java
  visible: true
  text: |
    package server;

    public class GetCommand implements Command {

        private DataBase db;
        private Integer key;
        public GetCommand(DataBase db, Integer key) {
            this.db = db;
            this.key = key;
        }
        @Override
        public String execute() {
            return this.db.getValue(this.key);
        }
    }
  learner_created: true
- name: src/server/SetCommand.java
  visible: true
  text: |
    package server;

    public class SetCommand implements Command {
        private DataBase db;
        private Integer key;
        private String value;
        public SetCommand(DataBase db, Integer key, String value) {
            this.db = db;
            this.key = key;
            this.value = value;
        }
        @Override
        public String execute() {
            return this.db.setValue(this.key, this.value);
        }
    }
  learner_created: true
- name: src/helpers/src/Main.java
  visible: true
  learner_created: true
- name: src/helper/GsonHelper.java
  visible: true
  learner_created: true
- name: src/server/Response.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5493#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 12 Apr 2023 16:32:01 UTC"
record: 4
